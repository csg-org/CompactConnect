# CompactConnect License Data Upload Instructions (Beta Release)

## Overview
This document provides step-by-step instructions for accessing the CompactConnect Beta API to upload license data using machine-to-machine authentication.

## Credential Security
You have received a one-time use link to access your API credentials. After retrieving the credentials, please:

1. Store the credentials securely in a password manager or secrets management system
2. Do not share these credentials with unauthorized personnel
3. Do not hardcode these credentials in source code repositories

If the link provided mentions it has already been used, please contact the individual who sent the link to you as the credentials will need to be
regenerated and sent using another link.

The credentials will be in this format:
```json
{
  "clientId": "<client id>",
  "clientSecret": "<client secret>",
  "authUrl": "<cognito auth domain url>"
}
```

## Authentication Process for Uploading License Data
Follow these steps to obtain an access token and make requests to the Compact Connect License API:

### Step 1: Generate an Access Token
You must first obtain an access token to authenticate your API requests. The access token will be used in the Authorization header of subsequent API calls. While the following curl command demonstrates how to generate a token, you should implement this authentication flow in your application's programming language using appropriate OAuth/HTTP libraries:

```bash
curl --location --request POST '<authUrl>?grant_type=client_credentials&client_id=<clientId>&client_secret=<clientSecret>' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'Accept: application/json' \
--data-urlencode 'scope=<jurisdiction>/<compact>.write'
```

Replace:
- `<authUrl>` with the auth URL from your credentials
- `<clientId>` with your client ID
- `<clientSecret>` with your client secret
- `<jurisdiction>` with your lowercased two-letter state code (e.g., "ky" for Kentucky)
- `<compact>` with the lowercased compact abbreviation (octp for the 'Occupational Therapy' compact, 
aslp for 'Audiology and Speech Language Pathology' compact, or coun for the 'Counseling compact')

Example response:
```json
{
  "access_token": "eyJraWQiOiJleGFtcGxlS2V5SWQiLCJhbGciOiJSUzI1NiJ9...",
  "expires_in": 900,
  "token_type": "Bearer"
}
```

For more information about this authentication process, please see the following [AWS documentation](https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html)

**Important Notes:**
- The access token is valid for 15 minutes from the time it is generated (900 seconds)
- Your application should request a new token before the current one expires
- Store the `access_token` value for use in API requests


### Step 2: Upload License Data to the Beta Environment
The following curl command example demonstrates how to upload license data, but you should implement this API call in your application's programming language using appropriate HTTP libraries. You will need to replace the example payload with valid license data that includes the correct license types for your specific compact (you can send up to 100 license records per request):

```bash
curl --location --request POST 'https://api.beta.compactconnect.org/v1/compacts/<compact>/jurisdictions/<jurisdiction>/licenses' \
--header 'Authorization: Bearer <access_token>' \
--header 'Content-Type: application/json' \
--data-raw '[
  {
    "ssn": "123-45-6789",
    "licenseNumber": "LIC123456",
    "licenseStatusName": "Active",
    "licenseStatus": "active",
    "compactEligibility": "eligible",
    "licenseType": "audiologist",
    "givenName": "Jane",
    "middleName": "Marie",
    "familyName": "Smith",
    "suffix": "Jr",
    "dateOfIssuance": "2023-01-15",
    "dateOfRenewal": "2023-01-15",
    "dateOfExpiration": "2025-01-14",
    "dateOfBirth": "1980-05-20",
    "homeAddressStreet1": "123 Main Street",
    "homeAddressStreet2": "Apt 4B",
    "homeAddressCity": "Louisville",
    "homeAddressState": "KY",
    "homeAddressPostalCode": "40202",
    "emailAddress": "jane.smith@example.com",
    "phoneNumber": "+15025551234",
    "npi": "1234567890"
  }
]'
```

Replace:
- `<access_token>` with the access token from Step 1
- `<compact>` with the compact abbreviation (e.g., "aslp", "octp", or "coun")
- `<jurisdiction>` with your lowercased two-letter state code (e.g., "ky")
- example payload with license

### License Data Schema Requirements
For the latest information about the license data field requirements, along with descriptions of each field, please see 
https://github.com/csg-org/CompactConnect/tree/main/backend/compact-connect/docs#field-descriptions

**Important Notes:**
- If licenseStatus is "inactive", compactEligibility cannot be "eligible"
- licenseType must match exactly with one of the valid types for the specified compact
- All date fields must use the YYYY-MM-DD format

### Verification that license records are uploaded
After submitting license data to the API, you can verify that your records were successfully uploaded by checking the API response:

1. **Successful Upload**: If the API responds with a 200 status code, your request was successful and the license data is being processed by the Compact Connect System. The response body will contain:
   ```json
   {
     "message": "OK"
   }
   ```

2. **Error Responses**: If you receive an error response, check the status code and message:
   - 400: Bad Request - Your request data is invalid (check the response body for validation errors)
   - 401: Unauthorized - Your access token is invalid or expired
   - 403: Forbidden - Your app client doesn't have permission to upload to the specified jurisdiction/compact
   - 502: Internal Server Error - There was a problem processing your request

3. **Validation Errors**: If your license data fails validation, the API will return a 400 status code with details about the validation errors in the response body.

Note that successful API responses (200 status code) indicate that the license data has been accepted for processing, but actual processing happens asynchronously. The data will be validated and processed by the Compact Connect System after acceptance.


## Implementation Recommendations
1. Implement token refresh logic to get a new token before the current one expires
2. Implement error handling for API responses
3. Configure your application to securely store and access the client credentials, do not store the credentials in your application code.

## Support
If you encounter any issues or have questions, please contact the individual which sent you the credentials.
