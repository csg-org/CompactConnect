#!/usr/bin/env bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, move this file to ".git/hooks/pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2


# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $against -- || exit 1

# Check individual files (not deleted) in the index
files=$(git diff-index --cached --name-only --diff-filter=d "$against")
result=0  # track exit code
if [ -n "$files" ]; then
    for f in $files; do
        # Only report known text files...
        if [ -z "$(git diff-index --cached --stat=1 "$against" "$f" | grep -is '| Bin')" ]; then
            # Only match regular files (e.g. no symlinks)
            # See: https://stackoverflow.com/a/8347325
            if [ "$(git ls-files --stage "$f" | awk '{print $1}' | head -c2)" = "10" ]; then
                # Checking if the last line is just a newline
                # Using staged version of file instead of working dir
                  if [ -n "$(git cat-file blob "$(git ls-files --stage "$f" | awk '{print $2}')" | tail -c1)" ]; then
                      # Report error
                      if [ "$result" -lt "1" ]; then
                          echo "Error: The following files have no trailing newline:" 1>&2
                      fi
                      echo -en "\t" 1>&2
                      echo "$f" 1>&2
                      result=1
                  fi
            fi
        fi
    done
fi
[ "$result" -lt "1" ] || exit "$result"


# Backend checks
dir=$(pwd)
cd backend

# Lint all python files
files=$(git diff-index \
    --cached \
    --name-only \
    $against \
    --relative \
    --no-renames \
    --diff-filter=dr \
    -- '*.py')
if [ -n "$files" ]; then
    ruff check $files || exit "$?"
fi

# Run the back-end tests
bin/run_tests.sh no-report || exit "$?"

# Check dependencies for known vulnerabilities
pip-audit || exit "$?"
cd "$dir"
